import re

--------------匹配单个字符---------------------
# . 可以匹配除换行符以外的任意字符
# [] 是字符集合，表示匹配方括号中任意所包含的任一字符
# [asd] 匹配其中任一字符
# [a-z] 匹配任意小写字母
# [0-9a-zA-Z_] 匹配任意大小写字母或数字或下划线
# [^asd] 匹配除了asd几个字母以外的所有字符，中括号里的^号称为'脱字符'，表示不匹配集合中的字符
# [^0-9] 匹配所有非数字字符
# \d 匹配数字，效果同[0-9]
# [^\d] 匹配非数字字符，效果同[^0-9]
# \w 匹配数字，字母和下划线，效果同[0-9a-zA-Z_]  （字母不包含空格）
# \W 匹配非数字，字母和下划线，效果同[^0-9a-zA-Z_]
# \s 匹配任意的空白符（空格，换行，回车，换页，制表），效果同[ \f\n\r\t]
# \S 匹配任意的非空白符，效果同[^ \f\n\r\t]


----------------锚字符（边界字符）----------------------------

# ^ 行首匹配，和在中括号里的^不是一个意思
# $ 行尾匹配
# \A 匹配字符串的开始，他和^的区别是，\A只匹配整个字符串的开头，即使在re.M下也不会匹配他行的行首
# \Z 匹配字符串的结束，他和$的区别是，\Z只匹配整个字符串的结束，即使在re.M下也不会匹配他行的行尾
# \b 匹配一个单词的边界，也就是指单词和空格间的位置 eg：r'er\b',匹配以er为结尾边界的位置
# \B 匹配非单词边界，与上面相反，匹配不是边界的


---------------多个字符--------------------------

(xyz) 匹配小括号内的xyz，作为一个整体去匹配
x? 匹配0个或者1个x
	eg：print(re.findall(r"a?","aaabaa")) # 非贪婪匹配，尽可能少的匹配
x* 匹配0个或者任意多个x
	eg：print(re.findall(r"a*","aaabaa")) # 贪婪匹配，尽可能多的匹配
x+ 匹配至少一个x（贪婪匹配）
x{n} 匹配确定的n个x（n是一个确定的非负整数
x{n,} 匹配至少n个x
x{n,m} 匹配至少n个，最多m个x，注意n<=m
x|y |表示或，匹配的是x或y


----------------------特殊-----------------------------

*? +? x?  最小匹配，通常都是尽可能多的匹配，可以使用这种解决贪婪匹配

(?:X) 类似于(xyz)，但不表示一个组