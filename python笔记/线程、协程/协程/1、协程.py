'''

子程序/子函数：在所有语言中都是层级调用，比如A调用B，在B执行的工程中又可以调用C，C执行完毕返回，B执行完毕返回最后是A执行完毕。是通过栈实现的，一个线程就是一个子程序，子程序调用总是一个入口，一次返回，调用的顺序是明确的

协程：
概述：看上去也是子程序，但执行过程中，在子程序的内部可中断，然后转而执行别的子程序，不是函数调用，有点类似CPU中断

'''

# 子程序的调用
def C():
    print("C--start")
    print("C--end")


def B():
    print("B--start")
    C()
    print("B--end")


def A():
    print("A--start")
    B()
    print("A--end")

A()




def Q():
	print(1)
	print(2)
	print(3)

def W():
	print('x')
	print('y')
	print('z')

# 实现： 1,2，x,y,z,3   但是并不在Q中调用W函数

# 执行起来有点像线程，但协程的特点在于是一个线程

# 与线程相比的优点：协程的执行效率极高，因为只有一个线程，也不存在同时写变量的冲突，在协程中共享资源不加锁，只需要判断状态